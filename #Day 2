# 98. Validate Binary Search Tree

# Given the root of a binary tree, determine if it is a valid binary search tree (BST).

# A valid BST is defined as follows:

# The left subtree of a node contains only nodes with keys less than the node's key.
# The right subtree of a node contains only nodes with keys greater than the node's key.
# Both the left and right subtrees must also be binary search trees.

class Solution:
    def isValidBST(self,  root):
        def valid(node, left, right) :
            if not node:
                return True
            if not (node.val < right and node.val > left):
                return False
            return (valid(node.left, left, node.val) and
                        valid(node.right, node.val, right))

        return valid(root, float("-inf"), float("inf"))



# 230. Kth Smallest Element in a BST
#Given the root of a binary search tree, and an integer k, return the kth smallest value (1-indexed) of all the values of the nodes in the tree.

class Solution(object):
    def kthSmallest(self, root, k):
        queue = deque([root])
        values = []
        while queue:
            poped = queue.popleft()
            if poped:
                values.append(poped.val)
                if poped.left:
                    queue.append(poped.left)
                if poped.right:
                    queue.append(poped.right)

        values.sort()
        return values[k-1]


# 217. Contains Duplicate
# Given an integer array nums, return true if any value appears at least twice in the array, and return false if every element is distinct.

class Solution(object):
    def containsDuplicate(self, nums):
        #Creating a data structure to store each element in array we scan through
        hash_table = {}
        #Going through each element in array
        for p in range(len(nums)):
            #If the current element is not in a data structure we created yet then append current element else we know that array is duplicated
            if hash_table.get(nums[p]):
                return True
            else:
                hash_table[nums[p]] = True
        return False



# 242. Valid Anagram
# Given two strings s and t, return true if t is an anagram of s, and false otherwise.

# An Anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once.

class Solution:
    def isAnagram(self, s, t):
        if len(s)!=len(t): return False
        d = {}
        for i in s:
            if i in d: d[i] += 1
            else: d[i] = 1
        for i in t:
            if i not in d or d[i]==0: return False
            d[i] -= 1
        return True
