# 98. Validate Binary Search Tree

# Given the root of a binary tree, determine if it is a valid binary search tree (BST).

# A valid BST is defined as follows:

# The left subtree of a node contains only nodes with keys less than the node's key.
# The right subtree of a node contains only nodes with keys greater than the node's key.
# Both the left and right subtrees must also be binary search trees.

class Solution:
    def isValidBST(self,  root):
        def valid(node, left, right) :
            if not node:
                return True
            if not (node.val < right and node.val > left):
                return False
            return (valid(node.left, left, node.val) and
                        valid(node.right, node.val, right))

        return valid(root, float("-inf"), float("inf"))



# 230. Kth Smallest Element in a BST

#Given the root of a binary search tree, and an integer k, return the kth smallest value (1-indexed) of all the values of the nodes in the tree.

class Solution(object):
    def kthSmallest(self, root, k):
        queue = deque([root])
        values = []
        while queue:
            poped = queue.popleft()
            if poped:
                values.append(poped.val)
                if poped.left:
                    queue.append(poped.left)
                if poped.right:
                    queue.append(poped.right)

        values.sort()
        return values[k-1]
