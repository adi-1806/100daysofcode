1
# 22. Generate Parentheses

# Given n pairs of parentheses, write a function to generate all combinations of well-formed parentheses.

class Solution(object):
    def generateParenthesis(self, n):
        """
        :type n: int
        :rtype: List[str]
        """
        def Generate_Parentheses(sentence, left, right):
            if len(sentence) == n * 2:
                l.append(sentence)
                return
            if left < n:
                Generate_Parentheses(sentence + '(', left + 1, right)
            if right < left:
                Generate_Parentheses(sentence + ')', left, right + 1)

        l = []
        Generate_Parentheses('',0,0)
        return l

            or (implementing using stack)

class Solution(object):
    def generateParenthesis (self, n: int) -> List[str]:
    # only add open paranthesis if open ‹ n
    # only add a closing paranthesis if closed ‹ open
    # valid IIF open == closed == n
        stack = []
        res = []
        def backtrack(openN, closedN) :
            if openN == closedN == n:
                res.append("".join(stack))
                return
            if openN < n:
                stack.append("(")
                backtrack(openN + 1, closedN)
                stack.pop()
            if closedN < openN:
                stack.append(")")
                backtrack(openN, closedN + 1)
                stack.pop()

        backtrack(0, 0)
        return res
