1
# 347. Top K Frequent Elements
# Given an integer array nums and an integer k, return the k most frequent elements. You may return the answer in any order.

class Solution(object):
    def topKFrequent(self, nums, k):
        dictionary = {}
        list_elements = []
        for element in nums:
            if element in dictionary: dictionary[element] +=1
            else:
                dictionary[element] = 1
        sorted_items = sorted(dictionary.items(), key=lambda x: x[1], reverse = True)
        
        for digit in range(k):
            key, value = sorted_items[digit]
            list_elements.append(key)
        return list_elements

2
# 238. Product of Array Except Self
# Given an integer array nums, return an array answer such that answer[i] is equal to the product of all the elements of nums except nums[i].

# The product of any prefix or suffix of nums is guaranteed to fit in a 32-bit integer.

# You must write an algorithm that runs in O(n) time and without using the division operation.

class Solution(object):
    def productExceptSelf(self, nums):
        res = [1] * (len (nums))
        prefix = 1
        for i in range(len (nums)):
            res [i] = prefix
            prefix *= nums [i]
        postfix = 1
        for i in range(len(nums) - 1, -1, -1):
            res [i] *= postfix 
            postfix *= nums [i]
        return res  

3
# 36. Valid Sudoku
# Determine if a 9 x 9 Sudoku board is valid. Only the filled cells need to be validated according to the following rules:

# Each row must contain the digits 1-9 without repetition.
# Each column must contain the digits 1-9 without repetition.
# Each of the nine 3 x 3 sub-boxes of the grid must contain the digits 1-9 without repetition.

class Solution(object):
    def isValidSudoku(self, board):
        row = collections.defaultdict(set)
        col = collections.defaultdict(set)
        square = collections.defaultdict(set)
        
        for r in range(9):
            for c in range(9):
                if board[r][c] == ".":
                    continue
                if(board[r][c] in row[r] or board[r][c] in col[c] or board[r][c] in square[(r//3,c//3)]):
                    return False
                row[r].add(board[r][c])
                col[c].add(board[r][c])
                square[(r//3,c//3)].add(board[r][c])
        
        return True

4
# 128. Longest Consecutive Sequence
# Given an unsorted array of integers nums, return the length of the longest consecutive elements sequence.

# You must write an algorithm that runs in O(n) time.

class Solution(object):
    def longestConsecutive(self, nums):
        if not nums:
            return 0
        
        nums_set = set(nums)
        longest_streak = 0
        
        for num in nums_set:
            # Only process if the current number is the start of a streak
            if num - 1 not in nums_set:
                current_num = num
                current_streak = 1
                
                # Find the length of the streak
                while current_num + 1 in nums_set:
                    current_num += 1
                    current_streak += 1
                
                longest_streak = max(longest_streak, current_streak)
        
        return longest_streak

