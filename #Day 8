1
# 1929. Concatenation of Array

class Solution(object):
    def getConcatenation(self, nums):
        return(nums + nums)

2
# 121. Best Time to Buy and Sell Stock

# You are given an array prices where prices[i] is the price of a given stock on the ith day.

# You want to maximize your profit by choosing a single day to buy one stock and choosing a different day in the future to sell that stock.

# Return the maximum profit you can achieve from this transaction. If you cannot achieve any profit, return 0.

class Solution(object):
    def maxProfit(self, prices):
        if not prices:
            return 0
        
        max_profit = 0
        min_price = prices[0]
        
        for price in prices[1:]:
            if price < min_price:
                min_price = price
            else:
                max_profit = max(max_profit, price - min_price)
        
        return max_profit

3
# 122. Best Time to Buy and Sell Stock II

# You are given an integer array prices where prices[i] is the price of a given stock on the ith day.

# On each day, you may decide to buy and/or sell the stock. You can only hold at most one share of the stock at any time. However, you can buy it then immediately sell it on the same day.

# Find and return the maximum profit you can achieve.

class Solution(object):
    def maxProfit(self, prices):
        minp = prices[0]
        profit = 0

        for i in range(1, len(prices)):
            diff = prices[i]-minp
            if diff >= 0:
                profit= profit + diff
            minp = prices[i]
        
        return profit

4
# 53. Maximum Subarray
# Given an integer array nums, find the  subarray with the largest sum, and return its sum.

class Solution:
    def maxSubArray(self, nums: List[int]) -> int:
        max_sum = -inf
        curr = 0
        for i in range(len(nums)):
            curr += nums[i]
            max_sum = curr if curr > max_sum else max_sum
            if curr < 0:
                curr = 0

        return max_sum 

5
# 152. Maximum Product Subarray

# Given an integer array nums, find a subarray that has the largest product, and return the product.

class Solution:
    def maxProduct(self, nums):
        res = max(nums)
        curMin, curMax = 1, 1

        for n in nums:
            if n == 0:
                curMin, curMax = 1,1
                
            tmp = n * curMax
            curMax = max(n * curMin, n * curMax, n)
            curMin = min(n * curMin, tmp, n)

            res = max(res, curMax)
        return res
